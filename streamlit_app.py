import streamlit as st
import pandas as pd
import urllib.parse
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import qrcode
import re
from PIL import Image
from io import BytesIO

# ========== GIAO DI·ªÜN ==========
st.markdown("""
    <style>
        .block-container {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }
    </style>
""", unsafe_allow_html=True)

st.title("üöó QR Car Management")

menu = [
    "üìã Xem danh s√°ch",
    "üîç T√¨m ki·∫øm xe",
    "‚ûï ƒêƒÉng k√Ω xe m·ªõi",
    "‚úèÔ∏è C·∫≠p nh·∫≠t xe",
    "üóëÔ∏è X√≥a xe",
    "üì± T·∫°o m√£ QR",
    "üì§ Xu·∫•t ra Excel",
    "üîê Qu·∫£n l√Ω m·∫≠t kh·∫©u QR",
    "üîì Gi·∫£i m√£ QR"
]
default_tab = "üîì Gi·∫£i m√£ QR" if "id" in st.query_params else menu[0]
choice = st.sidebar.radio("üìå Ch·ªçn ch·ª©c nƒÉng", menu, index=menu.index(default_tab))

# ========== H√ÄM TI·ªÜN √çCH ==========
def format_name(name):
    return ' '.join(word.capitalize() for word in name.strip().split())

def format_plate(plate):
    plate = re.sub(r'[^a-zA-Z0-9]', '', plate).upper()
    if len(plate) >= 8:
        return f"{plate[:2]}{plate[2]}-{plate[3:6]}.{plate[6:]}"
    return plate

def normalize_plate(plate):
    return re.sub(r'[^a-zA-Z0-9]', '', plate).lower()

# ========== L·∫§Y BI·ªÇN S·ªê T·ª™ URL ==========
bien_so_qr = st.query_params["id"][0] if "id" in st.query_params else None

# ========== GOOGLE SHEET ==========
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
try:
    creds_dict = dict(st.secrets["google_service_account"])
    creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n").strip()
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
except Exception as e:
    st.error(f"‚ùå L·ªói kh·ªüi t·∫°o Google Credentials: {e}")
    st.stop()

SHEET_ID = "1a_pMNiQbD5yO58abm4EfNMz7AbQTBmG8QV3yEN500uc"
try:
    sheet = client.open_by_key(SHEET_ID).worksheet("Sheet1")
except Exception as e:
    st.error(f"‚ùå L·ªói m·ªü Google Sheet: {e}")
    st.stop()

# ========== T·∫¢I D·ªÆ LI·ªÜU ==========
try:
    data = sheet.get_all_records()
    df = pd.DataFrame(data)
except Exception as e:
    st.error(f"‚ùå L·ªói t·∫£i d·ªØ li·ªáu: {e}")
    st.stop()

# ========== C√ÅC CH·ª®C NƒÇNG ==========
if choice == "üìã Xem danh s√°ch":
    st.subheader("Danh s√°ch xe")
    st.dataframe(df)

elif choice == "üîç T√¨m ki·∫øm xe":
    st.subheader("üîç T√¨m ki·∫øm xe theo bi·ªÉn s·ªë")
    bien_so_input = st.text_input("Nh·∫≠p bi·ªÉn s·ªë xe c·∫ßn t√¨m")
    if bien_so_input:
        bien_so_norm = normalize_plate(bien_so_input)
        df["Bi·ªÉn s·ªë chu·∫©n h√≥a"] = df["Bi·ªÉn s·ªë"].apply(normalize_plate)
        ket_qua = df[df["Bi·ªÉn s·ªë chu·∫©n h√≥a"] == bien_so_norm]
        if ket_qua.empty:
            st.warning("üö´ Kh√¥ng t√¨m th·∫•y xe n√†o kh·ªõp v·ªõi bi·ªÉn s·ªë ƒë√£ nh·∫≠p.")
        else:
            st.success(f"‚úÖ T√¨m th·∫•y {len(ket_qua)} xe kh·ªõp.")
            st.dataframe(ket_qua.drop(columns=["Bi·ªÉn s·ªë chu·∫©n h√≥a"]), use_container_width=True)

elif choice == "‚ûï ƒêƒÉng k√Ω xe m·ªõi":
    st.subheader("ƒêƒÉng k√Ω xe m·ªõi")
    don_vi_map = dict(zip(df["T√™n ƒë∆°n v·ªã"], df["M√£ ƒë∆°n v·ªã"]))
    ten_don_vi_list = sorted(don_vi_map.keys())
    col1, col2 = st.columns(2)
    with col1:
        ho_ten = st.text_input("H·ªç t√™n")
        bien_so = st.text_input("Bi·ªÉn s·ªë xe")
        ten_don_vi = st.selectbox("T√™n ƒë∆°n v·ªã", ten_don_vi_list)
        ma_don_vi = don_vi_map.get(ten_don_vi, "")
    with col2:
        chuc_vu = st.text_input("Ch·ª©c v·ª•")
        so_dien_thoai = st.text_input("S·ªë ƒëi·ªán tho·∫°i")
        email = st.text_input("Email")

    filtered = df["M√£ th·∫ª"].dropna()[df["M√£ th·∫ª"].str.startswith(ma_don_vi)]
    if not filtered.empty:
        numbers = filtered.str.extract(f"{ma_don_vi}(\d{{3}})")[0].dropna().astype(int)
        next_number = max(numbers) + 1
    else:
        next_number = 1
    ma_the = f"{ma_don_vi}{next_number:03d}"

    st.markdown(f"üîê **M√£ th·∫ª t·ª± sinh:** `{ma_the}`")
    st.markdown(f"üè¢ **M√£ ƒë∆°n v·ªã:** `{ma_don_vi}`")

    if st.button("L∆∞u th√¥ng tin"):
        ho_ten = format_name(ho_ten)
        bien_so = format_plate(bien_so)
        if not ho_ten or not bien_so:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t H·ªç t√™n v√† Bi·ªÉn s·ªë xe.")
        elif bien_so in df["Bi·ªÉn s·ªë"].apply(format_plate).values:
            st.error("‚ùå Bi·ªÉn s·ªë xe ƒë√£ t·ªìn t·∫°i!")
        else:
            stt = len(df) + 1
            sheet.append_row([
                stt, ho_ten, bien_so, ma_the, ma_don_vi,
                ten_don_vi, chuc_vu, so_dien_thoai, email
            ])
            st.success(f"‚úÖ ƒê√£ l∆∞u th√¥ng tin xe th√†nh c√¥ng!\nüîê M√£ th·∫ª: `{ma_the}`")

elif choice == "‚úèÔ∏è C·∫≠p nh·∫≠t xe":
    st.subheader("‚úèÔ∏è C·∫≠p nh·∫≠t xe")
    bien_so_input = st.text_input("Nh·∫≠p bi·ªÉn s·ªë xe c·∫ßn c·∫≠p nh·∫≠t")
    if bien_so_input:
        bien_so_norm = normalize_plate(bien_so_input)
        df["Bi·ªÉn s·ªë chu·∫©n h√≥a"] = df["Bi·ªÉn s·ªë"].apply(normalize_plate)
        ket_qua = df[df["Bi·ªÉn s·ªë chu·∫©n h√≥a"] == bien_so_norm]
        if ket_qua.empty:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y bi·ªÉn s·ªë xe!")
        else:
            st.success(f"‚úÖ T√¨m th·∫•y {len(ket_qua)} xe kh·ªõp.")
            st.dataframe(ket_qua.drop(columns=["Bi·ªÉn s·ªë chu·∫©n h√≥a"]), use_container_width=True)
            index = ket_qua.index[0]
            row = ket_qua.iloc[0]
            st.markdown("### üìù Nh·∫≠p th√¥ng tin m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t")
            col1, col2 = st.columns(2)
            with col1:
                ho_ten_moi = st.text_input("H·ªç t√™n", value=row["H·ªç t√™n"])
                bien_so_moi = st.text_input("Bi·ªÉn s·ªë xe", value=row["Bi·ªÉn s·ªë"])
                ten_don_vi_moi = st.text_input("T√™n ƒë∆°n v·ªã", value=row["T√™n ƒë∆°n v·ªã"])
                ma_don_vi_moi = st.text_input("M√£ ƒë∆°n v·ªã", value=row["M√£ ƒë∆°n v·ªã"])
            with col2:
                chuc_vu_moi = st.text_input("Ch·ª©c v·ª•", value=row["Ch·ª©c v·ª•"])
                so_dien_thoai_moi = st.text_input("S·ªë ƒëi·ªán tho·∫°i", value=row["S·ªë ƒëi·ªán tho·∫°i"])
                email_moi = st.text_input("Email", value=row["Email"])
            if st.button("C·∫≠p nh·∫≠t"):
                sheet.update(f"A{index+2}:I{index+2}", [[
                    row["STT"],
                    ho_ten_moi,
                    bien_so_moi,
                    row["M√£ th·∫ª"],
                    ma_don_vi_moi,
                    ten_don_vi_moi,
                    chuc_vu_moi,
                    so_dien_thoai_moi,
                    email_moi
                ]])
                st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin xe th√†nh c√¥ng!")

elif choice == "üóëÔ∏è X√≥a xe":
    st.subheader("üóëÔ∏è X√≥a xe kh·ªèi danh s√°ch")
    bien_so_input = st.text_input("Nh·∫≠p bi·ªÉn s·ªë xe c·∫ßn x√≥a")
    if bien_so_input:
        try:
            bien_so_norm = normalize_plate(bien_so_input)
            df = df.copy()
            df["Bi·ªÉn s·ªë chu·∫©n h√≥a"] = df["Bi·ªÉn s·ªë"].astype(str).apply(normalize_plate)
            ket_qua = df[df["Bi·ªÉn s·ªë chu·∫©n h√≥a"] == bien_so_norm]

            if ket_qua.empty:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y bi·ªÉn s·ªë xe!")
            else:
                st.success(f"‚úÖ T√¨m th·∫•y {len(ket_qua)} xe kh·ªõp.")
                st.dataframe(ket_qua.drop(columns=["Bi·ªÉn s·ªë chu·∫©n h√≥a"]), use_container_width=True)

                index = ket_qua.index[0]
                row = ket_qua.iloc[0]

                if st.button("X√°c nh·∫≠n x√≥a"):
                    sheet.delete_rows(index + 2)  # +2 v√¨ d√≤ng header
                    st.success(f"üóëÔ∏è ƒê√£ x√≥a xe c√≥ bi·ªÉn s·ªë `{row['Bi·ªÉn s·ªë']}` th√†nh c√¥ng!")

        except Exception as e:
            st.error(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω: {e}")

elif choice == "üì± T·∫°o m√£ QR":
    st.subheader("üì± T·∫°o m√£ QR cho xe")

    # Ch·ªçn xe c·∫ßn t·∫°o m√£
    bien_so_input = st.text_input("üìã Nh·∫≠p bi·ªÉn s·ªë xe ƒë·ªÉ t·∫°o m√£ QR")
    if bien_so_input:
        try:
            bien_so_norm = normalize_plate(bien_so_input)

            df = df.copy()
            df["Bi·ªÉn s·ªë chu·∫©n h√≥a"] = df["Bi·ªÉn s·ªë"].astype(str).apply(normalize_plate)
            ket_qua = df[df["Bi·ªÉn s·ªë chu·∫©n h√≥a"] == bien_so_norm]

            if ket_qua.empty:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y xe c√≥ bi·ªÉn s·ªë n√†y!")
            else:
                row = ket_qua.iloc[0]

                # T·∫°o link QR d√πng bi·ªÉn s·ªë ƒë√£ chu·∫©n h√≥a
                import urllib.parse
                link = f"https://qrcarump.streamlit.app/?id={normalize_plate(row['Bi·ªÉn s·ªë'])}"

                # T·∫°o m√£ QR
                import qrcode
                import io
                img = qrcode.make(link)
                buf = io.BytesIO()
                img.save(buf)
                st.image(buf.getvalue(), caption=f"M√£ QR cho xe {row['Bi·ªÉn s·ªë']}", use_column_width=True)

                # Cho ph√©p t·∫£i v·ªÅ
                st.download_button(
                    label="üì• T·∫£i m√£ QR",
                    data=buf.getvalue(),
                    file_name=f"QR_{row['Bi·ªÉn s·ªë']}.png",
                    mime="image/png"
                )

                # Hi·ªÉn th·ªã th√¥ng tin xe
                st.success("‚úÖ Th√¥ng tin xe:")
                st.dataframe(row.to_frame().T, use_container_width=True)

        except Exception as e:
            st.error(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω: {e}")

elif choice == "üîì Gi·∫£i m√£ QR":
    st.subheader("üîì Gi·∫£i m√£ th√¥ng tin xe t·ª´ m√£ QR")

    bien_so_url = st.query_params["id"][0] if "id" in st.query_params else ""
    bien_so_input = bien_so_url if bien_so_url else st.text_input("üìã Nh·∫≠p bi·ªÉn s·ªë xe")
    mat_khau_input = st.text_input("üîë Nh·∫≠p m·∫≠t kh·∫©u", type="password")

    if bien_so_input and mat_khau_input:
        bien_so_norm = normalize_plate(bien_so_input)
        df["Bi·ªÉn s·ªë chu·∫©n h√≥a"] = df["Bi·ªÉn s·ªë"].astype(str).apply(normalize_plate)
        ket_qua = df[df["Bi·ªÉn s·ªë chu·∫©n h√≥a"] == bien_so_norm]

        if ket_qua.empty:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y xe!")
        else:
            mat_khau_dung = st.session_state.get("mat_khau_qr", "qr@217hb")
            if mat_khau_input == mat_khau_dung:
                row = ket_qua.iloc[0]
                st.success("‚úÖ M·∫≠t kh·∫©u ƒë√∫ng. Th√¥ng tin xe:")
                st.write(f"""
                - Bi·ªÉn s·ªë: {row['Bi·ªÉn s·ªë']}
                - H·ªç t√™n: {row['H·ªç t√™n']}
                - M√£ th·∫ª: {row['M√£ th·∫ª']}
                - ƒê∆°n v·ªã: {row['T√™n ƒë∆°n v·ªã']}
                - Ch·ª©c v·ª•: {row['Ch·ª©c v·ª•']}
                - SƒêT: {row['S·ªë ƒëi·ªán tho·∫°i']}
                - Email: {row['Email']}
                """)
            else:
                st.error("‚ùå Sai m·∫≠t kh·∫©u.")

elif choice == "üîê Qu·∫£n l√Ω m·∫≠t kh·∫©u QR":
    st.subheader("üîê Qu·∫£n l√Ω m·∫≠t kh·∫©u QR")

    if "mat_khau_qr" not in st.session_state:
        st.session_state["mat_khau_qr"] = "qr@217hb"

    mat_khau_hien_tai = st.session_state["mat_khau_qr"]
    st.info(f"üîê M·∫≠t kh·∫©u hi·ªán t·∫°i ƒëang d√πng: `{mat_khau_hien_tai}`")

    mat_khau_moi = st.text_input("üîÑ Nh·∫≠p m·∫≠t kh·∫©u m·ªõi", type="password")

    if st.button("‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u"):
        if mat_khau_moi.strip() == "":
            st.warning("‚ö†Ô∏è M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
        else:
            st.session_state["mat_khau_qr"] = mat_khau_moi.strip()
            st.success(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u QR th√†nh `{mat_khau_moi.strip()}`")

elif choice == "üì§ Xu·∫•t ra Excel":
    st.subheader("üì§ T·∫£i danh s√°ch xe d∆∞·ªõi d·∫°ng Excel")
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='DanhSachXe')
        writer.close()
        processed_data = output.getvalue()

    st.download_button(
        label="üì• T·∫£i Excel",
        data=processed_data,
        file_name="DanhSachXe.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
